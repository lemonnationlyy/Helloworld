package demo;import java.util.Stack;/** * Created by 59685 on 2017/8/30. * 中缀表达式求值： * 将中缀表达式转换为后缀表达式： * 与转换为前缀表达式相似，遵循以下步骤： * (1) 初始化两个栈：运算符栈S1和储存中间结果的栈S2； * (2) 从左至右扫描中缀表达式； * (3) 遇到操作数时，将其压入S2； * (4) 遇到运算符时，比较其与S1栈顶运算符的优先级： * (4-1) 如果S1为空，或栈顶运算符为左括号“(”，则直接将此运算符入栈； * (4-2) 否则，若优先级比栈顶运算符的高，也将运算符压入S1（注意转换为前缀表达式时是优先级较高或相同，而这里则不包括相同的情况）； * (4-3) 否则，将S1栈顶的运算符弹出并压入到S2中，再次转到(4-1)与S1中新的栈顶运算符相比较； * (5) 遇到括号时： * (5-1) 如果是左括号“(”，则直接压入S1； * (5-2) 如果是右括号“)”，则依次弹出S1栈顶的运算符，并压入S2，直到遇到左括号为止，此时将这一对括号丢弃； * (6) 重复步骤(2)至(5)，直到表达式的最右边； * (7) 将S1中剩余的运算符依次弹出并压入S2； * (8) 依次弹出S2中的元素并输出，结果的逆序即为中缀表达式对应的后缀表达式（转换为前缀表达式时不用逆序）。 */public class Solution {    public static int excel(String equation) throws Exception {        char[] chars = equation.toCharArray();        Stack<Character> s = new Stack<>();        for (int i = equation.length()-1; i >= 0; i--) {            s.add(equation.charAt(i));        }        Stack<Character> s1 = new Stack<>();        Stack<Character> s2 = new Stack<>();        while (!s.empty()) {            char c = s.pop();            if (c >= '0' && c <= '9') {                s2.add(c);            } else {                if (c == '(') {                    s1.add(c);                } else if (c == ')') {                    char temp;                    while ((temp = s1.pop())!='(') {                        s2.add(temp);                    }                } else {                    if (s1.empty() || s1.peek()=='(') {                        s1.add(c);                    } else {                        while (!s1.empty() && !isLit(s1.peek(), c)) {//取出栈中高阶运算符                            s2.add(s1.pop());                        }                        s1.add(c);                    }                }            }        }        while (!s1.empty()) {            s2.add(s1.pop());        }        /*while (!s2.empty()) {            System.out.println(s2.pop());        }*/        //后缀表达式求值        while (!s2.empty()) {            s1.add(s2.pop());        }        Stack<Integer> s3 = new Stack<>();        //s1存储了后缀表达式，准备用s3来存放数字        while (!s1.empty()) {            char temp = s1.pop();            if (temp>='0'&&temp<='9') {                s3.add(Integer.parseInt(temp+""));            } else {                s3.add(calculate(s3.pop(), s3.pop(), temp));            }        }        return s3.pop();    }    public static int calculate(int b, int a, char x) throws Exception {        if (x=='+')            return a + b;        if (x=='-')            return a - b;        if (x=='*')            return a * b;        if (x=='/')            return a / b;        throw new Exception();    }    public static boolean isLit(Character c1, Character c2) {        if ((c2 == '*' || c2 == '/') && (c1 == '+' || c1 == '-')) {            return true;        }        if (c1 == '(') {            return true;        }        return false;    }    public static void main(String[] args) {        try {            System.out.println(excel("1+((2+3)*4)-5"));//            System.out.println(excel("3*5+2-(2*3+4/2)"));        } catch (Exception e) {            e.printStackTrace();        }    }}